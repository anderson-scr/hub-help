/*
	01 - REFORÇAR O ISNULL
	02 - USO DAS FUNÇÕES DE AGRUPAMENTO E CLASSIFICAÇÃO
	03 - USO DO IN EM CONSULTAS E EM EXPRESSÕES CONDICIONAIS IF, CASE...
	04 - UNION, INTERSECT, EXCEPT
	05 - SUB CONSULTAS NO SELECT
	06 - SUB CONSULTAS NO FROM/JOIN
	07 - SUB CONSULTAS NO WHERE COM USO DO IN
	08 - SUB CONSULTAS NO WHERE COM USO DO EXISTS
	09 - PIVOT E UNPIVOT
	10 - JSON
	11 - XML
*/


01 - SELECT* FROM FUNCIONARIOS F WHERE ISNULL(F.CD_BANCO, 2) = 2

01.1 - DECLARE @ID INT
		SET @ID = 1
		SELECT * FROM FUNCIONARIOS F WHERE ISNULL(@ID, 0 ) = 0 OR @ID = F.CD_FUNCIONARIO

02 - SELECT COUNT(*) AS [QTD_FUNCIONARIOS], SUM(F.SALARIO) AS [TOTAL_SALARIOS], 
		AVG(F.SALARIO) AS [MEDIA_SALARIAL], MIN(F.SALARIO) AS [MENOR_SALARIO], 
		MAX(F.SALARIO) AS [MAIOR_SALARIO], STDEV(F.SALARIO) AS [DESVIO_PADRAO], 
		VARP(F.SALARIO) AS [VARICANCIA] FROM FUNCIONARIOS F

02.1 - SELECT F.CD_DEPARTAMENTO, D.NM_DEPARTAMENTO, COUNT(*) [QTD_FUNCIONARIOS_POR_DEPARTAMENTO]
		FROM FUNCIONARIOS F JOIN DEPARTAMENTOS D ON F.CD_DEPARTAMENTO = D.CD_DEPARTAMENTO
		GROUP BY F.CD_DEPARTAMENTO, D.NM_DEPARTAMENTO

02.2 - SELECT*, COUNT(*) OVER(PARTITION BY F.CD_DEPARTAMENTO, F.CD_BANCO)
		[QTD_FUNCIONARIOS_POR_DEPARTAMENTO_E_BANCO]	FROM FUNCIONARIOS F

02.3 - SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, D.CD_DEPARTAMENTO, D.NM_DEPARTAMENTO,
		ROW_NUMBER() OVER(ORDER BY D.NM_DEPARTAMENTO) [ROW_NUMBER_NM_DEP],
		ROW_NUMBER() OVER(ORDER BY F.NM_FUNCIONARIO) [ROW_NUMBER_NM_FUNC],
		RANK() OVER(ORDER BY D.NM_DEPARTAMENTO) [RANK],
		DENSE_RANK() OVER(ORDER BY D.NM_DEPARTAMENTO) [DENSE_RANK],
		NTILE(5) OVER(ORDER BY D.NM_DEPARTAMENTO) [NTILE]
	
		FROM FUNCIONARIOS F JOIN DEPARTAMENTOS D ON F.CD_DEPARTAMENTO = D.CD_DEPARTAMENTO

02.4 - SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, D.CD_DEPARTAMENTO, D.NM_DEPARTAMENTO,
		ROW_NUMBER() OVER(PARTITION BY F.CD_DEPARTAMENTO ORDER BY F.NM_FUNCIONARIO) [ROW_NUMBER_NM_FUNC]
		FROM FUNCIONARIOS F

02.5 - SELECT HASHBYTES('MD5', 'SENHA_MT_SEGURA')

03 - SELECT* FROM FUNCIONARIOS F WHERE SALARIO IN (180.0, 1500.0)

03.1 DECLARE @OPCAO VARCHAR(30) = 'RELATORIO'
	IF @OPCAO IN ('CONSULTA', 'RELATORIO')
		BEGIN
			SELECT 'CONSULTA/RELATORIO'
		END
	ELSE
		BEGIN
			SELECT 'OPCAO INVALIDA'
		END

00.TABELA_TMP - SELECT D.NM_DEPARTAMENTO, COUNT(*) AS [TOTAL_FUNCIONARIOS] 
				INTO #tabela FROM DEPARTAMENTOS D JOIN FUNCIONARIOS F ON
				D.CD_DEPARTAMENTO = F.CD_DEPARTAMENTO
				GROUP BY D.NM_DEPARTAMENTO

04 - SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO FROM FUNCIONARIOS F WHERE F.CD_DEPARTAMENTO = 4
		UNION
	SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO FROM FUNCIONARIOS F WHERE F.CD_FUNCIONARIO = 7


04.1 -  SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, CATEGORIA = 99 
			FROM FUNCIONARIOS F WHERE F.CD_DEPARTAMENTO = 4
	UNION
		SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, F.CD_DEPARTAMENTO 
			FROM FUNCIONARIOS F WHERE F.CD_FUNCIONARIO = 7

04.2 SELECT* FROM (SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, CATEGORIA = 99 
					FROM FUNCIONARIOS F WHERE F.CD_DEPARTAMENTO = 4
						UNION
					SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, F.CD_DEPARTAMENTO 
					FROM FUNCIONARIOS F WHERE F.CD_FUNCIONARIO = 7) T

04.EXTRA - SELECT* FROM (VALUES(1,1), (1,2)) D(X, Y)

04.3 -  SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, CATEGORIA = 4
			FROM FUNCIONARIOS F WHERE F.CD_DEPARTAMENTO = 4
	INTERSECT
		SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, F.CD_DEPARTAMENTO 
			FROM FUNCIONARIOS F WHERE F.CD_FUNCIONARIO = 7

04.4 - SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, CATEGORIA = 4
			FROM FUNCIONARIOS F WHERE F.CD_DEPARTAMENTO = 4
	EXCEPT
		SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, F.CD_DEPARTAMENTO 
			FROM FUNCIONARIOS F WHERE F.CD_FUNCIONARIO = 7

04.5 - 	SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, F.CD_DEPARTAMENTO, F.CD_BANCO
			FROM FUNCIONARIOS F WHERE F.CD_BANCO IS NULL
				UNION
		SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, F.CD_DEPARTAMENTO, F.CD_BANCO
			FROM FUNCIONARIOS F WHERE F.CD_DEPARTAMENTO IN (3, 4)
	EXCEPT
		SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, F.CD_DEPARTAMENTO, F.CD_BANCO
			FROM FUNCIONARIOS F WHERE F.CD_DEPARTAMENTO IS NULL
				INTERSECT
		SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, F.CD_DEPARTAMENTO, F.CD_BANCO
			FROM FUNCIONARIOS F WHERE F.CD_BANCO IN (3, 4)

05 - SELECT  D.NM_DEPARTAMENTO, (SELECT COUNT(*) FROM FUNCIONARIOS F 
		WHERE F.CD_DEPARTAMENTO = D.CD_DEPARTAMENTO) TOTAL FROM DEPARTAMENTOS D

05.1 - SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, 
		(SELECT B.NU_AGENCIA FROM BANCOS B WHERE B.CD_BANCO = F.CD_BANCO) AGENCIA,
		(SELECT B.NU_BANCO FROM BANCOS B WHERE B.CD_BANCO = F.CD_BANCO) CONTA,
		(SELECT D.NM_DEPARTAMENTO FROM DEPARTAMENTOS D WHERE D.CD_DEPARTAMENTO = F.CD_DEPARTAMENTO) DEP
		FROM FUNCIONARIOS F

		/* EQUIVALE A ISSO
			SELECT F.CD_FUNCIONARIO, F.NM_FUNCIONARIO, B.NU_AGENCIA, B.NU_BANCO, D.NM_DEPARTAMENTO 
				FROM FUNCIONARIOS F	LEFT JOIN BANCOS B ON F.CD_BANCO = B.CD_BANCO
				LEFT JOIN DEPARTAMENTOS D ON D.CD_DEPARTAMENTO = F.CD_DEPARTAMENTO
		*/

06 - SELECT T.NM_DEPARTAMENTO, MIN(T.SALARIO) MENOR_SALARIO FROM 
		(SELECT F.SALARIO, D.NM_DEPARTAMENTO FROM FUNCIONARIOS F 
			JOIN DEPARTAMENTOS D ON F.CD_DEPARTAMENTO = D.CD_DEPARTAMENTO ) T 
	GROUP BY NM_DEPARTAMENTO

	-- OU --

	SELECT D.NM_DEPARTAMENTO, MIN(T.SALARIO) MENOR_SALARIO FROM DEPARTAMENTOS D JOIN 
		(SELECT F.SALARIO,F.CD_DEPARTAMENTO FROM FUNCIONARIOS F) T
	ON T.CD_DEPARTAMENTO = D.CD_DEPARTAMENTO
	GROUP BY NM_DEPARTAMENTO

07 - SELECT * FROM FUNCIONARIOS F WHERE F.CD_BANCO IN
		(SELECT CD_BANCO FROM BANCOS B WHERE B.NU_AGENCIA = 3451)


08 - SELECT * FROM FUNCIONARIOS F WHERE EXISTS 
		(SELECT * FROM BANCOS B WHERE B.NM_BANCO LIKE 'CAIXA%' AND F.CD_BANCO = B.CD_BANCO)

9.0 - 	SELECT SALARIO, COUNT(*) TOTAL
			FROM FUNCIONARIOS GROUP BY SALARIO

		SELECT * FROM   
		( SELECT SALARIO
			FROM FUNCIONARIOS) t 
		PIVOT(
			COUNT(SALARIO)
			FOR SALARIO IN (
				[180.00], 
				[189.00], 
				[200.00], 
				[500.00], 
				[800.00], 
				[1500.00])
		) AS pivot_table;

		-- OU --

		DECLARE 
			@columns NVARCHAR(MAX) = '', 
			@sql     NVARCHAR(MAX) = '';
		
		SELECT
			@columns+=QUOTENAME(SALARIO) + ','
		FROM 
			FUNCIONARIOS
		GROUP BY 
			SALARIO;
		
		SET @columns = LEFT(@columns, LEN(@columns) - 1);
		
		SET @sql ='SELECT * FROM   
					( SELECT SALARIO
						FROM FUNCIONARIOS) t 
					PIVOT(
						COUNT(SALARIO)
						FOR SALARIO IN ('+ @columns +'))AS pivot_table';
		
		EXECUTE (@sql);

9.1 - 	SELECT D.NM_DEPARTAMENTO, AVG(F.SALARIO) MEDIA_SALARIO
			FROM FUNCIONARIOS F JOIN DEPARTAMENTOS D
				ON F.CD_DEPARTAMENTO = D.CD_DEPARTAMENTO GROUP BY D.NM_DEPARTAMENTO

		SELECT * FROM   
			( SELECT D.NM_DEPARTAMENTO, F.SALARIO
				FROM FUNCIONARIOS F JOIN DEPARTAMENTOS D ON F.CD_DEPARTAMENTO = D.CD_DEPARTAMENTO) t 
			PIVOT(
				AVG(t.SALARIO)
				FOR t.NM_DEPARTAMENTO IN (
					[Desenvolvimento], 
					[Editoração], 
					[Financeiro], 
					[Recursos Humanos])
			) AS pivot_table;

		-- OU --

		DECLARE 
			@columns NVARCHAR(MAX) = '', 
			@sql     NVARCHAR(MAX) = '';
		
		SELECT
			@columns+=QUOTENAME(NM_DEPARTAMENTO) + ','
		FROM 
			DEPARTAMENTOS
		GROUP BY 
			NM_DEPARTAMENTO;
		
		SET @columns = LEFT(@columns, LEN(@columns) - 1);
		
		SET @sql ='SELECT * FROM   
					( SELECT D.NM_DEPARTAMENTO, F.SALARIO
						FROM FUNCIONARIOS F JOIN DEPARTAMENTOS D
							ON F.CD_DEPARTAMENTO = D.CD_DEPARTAMENTO) t 
					PIVOT(
						AVG(SALARIO)
						FOR NM_DEPARTAMENTO IN ('+ @columns +'))AS pivot_table';
		
		EXECUTE (@sql);

10 - SELECT * FROM BANCOS FOR JSON AUTO;

	DECLARE @JS VARCHAR(MAX) = '[{"CD_BANCO":1,"NM_BANCO":"Banco do Brasil","NU_AGENCIA":4073,"NU_BANCO":66206},{"CD_BANCO":2,"NM_BANCO":"Bradesco","NU_AGENCIA":5004,"NU_BANCO":124688},{"CD_BANCO":3,"NM_BANCO":"Bradesco","NU_AGENCIA":3451,"NU_BANCO":12322},{"CD_BANCO":4,"NM_BANCO":"Itaú","NU_AGENCIA":232324,"NU_BANCO":34534}]';

	--INSERT INTO #BANCOS2(CD_BANCO, NM_BANCO, NU_AGENCIA, NU_BANCO)
	SELECT* FROM OPENJSON(@JS)
	WITH 
	(
		CD_BANCO INT,
		NM_BANCO VARCHAR(150),
		NU_AGENCIA INT,
		NU_BANCO INT
	) AS B;

	SELECT* FROM OPENJSON(@JS)

11 - SELECT* FROM FUNCIONARIOS FOR XML AUTO

	SELECT F.CD_DEPARTAMENTO, F.NM_FUNCIONARIO
	INTO #X
	FROM FUNCIONARIOS F
	ORDER BY CD_DEPARTAMENTO

	SELECT X1.CD_DEPARTAMENTO
	, FUNCS = STUFF(( SELECT CONCAT(',', X2.NM_FUNCIONARIO)
	FROM #X X2
	WHERE X2.CD_DEPARTAMENTO = X1.CD_DEPARTAMENTO
	ORDER BY X2.NM_FUNCIONARIO
	FOR XML PATH(''))
	, 1, 1, '')
	FROM #X X1
	GROUP BY X1.CD_DEPARTAMENTO


'EXERCICIO EXTRA 1 - MOSTRE OS FUNCIONARIOS ADMITIDOS POR ANO DESDE A PRIMEIRA ADMISSAO' 
	SELECT YEAR(DT_ADMISSAO), COUNT(*) ANO FROM FUNCIONARIOS GROUP BY YEAR(DT_ADMISSAO)

	DECLARE @cnt INT = (SELECT MIN(YEAR(DT_ADMISSAO)) FROM FUNCIONARIOS),
						@columns NVARCHAR(MAX) = '', @sql     NVARCHAR(MAX) = '';

	DROP TABLE IF EXISTS #T
	CREATE TABLE #T(ANO INT, TOTAL INT  DEFAULT 0)

	WHILE @cnt <= (SELECT MAX(YEAR(DT_ADMISSAO)) FROM FUNCIONARIOS)
	BEGIN
	SELECT @columns += QUOTENAME(@cnt)+ ',';
	INSERT INTO #T VALUES (@cnt, (SELECT COUNT(*) FROM FUNCIONARIOS WHERE YEAR(DT_ADMISSAO) = @cnt))
	SET @cnt = @cnt + 1;
	END


	SET @columns = LEFT(@columns, LEN(@columns) - 1);

	SELECT* FROM #T

	SET @sql ='SELECT * FROM   
						( SELECT YEAR(DT_ADMISSAO) as ANO
							FROM FUNCIONARIOS) t 
						PIVOT(
							COUNT(ANO)
							FOR ANO IN ('+ @columns +'))AS pivot_table';
			
	EXECUTE (@sql);

'EXERCICIO EXTRA 2 - MOSTRE OS FUNCIONARIOS ADMITIDOS POR ANO E MES DESDE A PRIMEIRA ADMISSAO'
	SELECT YEAR(DT_ADMISSAO) ANO, MONTH(DT_ADMISSAO) MES, COUNT(*) TOTAL FROM FUNCIONARIOS
		GROUP BY YEAR(DT_ADMISSAO), MONTH(DT_ADMISSAO) ORDER BY ANO

	DECLARE @cnt INT = (SELECT MIN(YEAR(DT_ADMISSAO)) FROM FUNCIONARIOS), @cntMes INT = 1,
						@columns NVARCHAR(MAX) = '', @sql     NVARCHAR(MAX) = '';

	DROP TABLE IF EXISTS #T
	CREATE TABLE #T(ANO INT, MES INT DEFAULT 0, TOTAL INT DEFAULT 0)

	WHILE @cnt <= (SELECT MAX(YEAR(DT_ADMISSAO)) FROM FUNCIONARIOS)
		BEGIN
			WHILE @cntMes <= 12
				BEGIN
					INSERT INTO #T VALUES (@cnt, @cntMes, (SELECT COUNT(*) FROM FUNCIONARIOS
						WHERE YEAR(DT_ADMISSAO) = @cnt AND MONTH(DT_ADMISSAO) = @cntMes))
					SET @cntMes = @cntMes + 1;
				END
			SET @cnt = @cnt + 1;
			SET @cntMes = 1
		END

	SELECT* FROM #T

'EXERCICIO EXTRA 3 - MOSTRE OS ANOS QUE NÃO HOUVE ADMISSÃO'	
		SELECT ANO FROM #T WHERE TOTAL = 0 GROUP BY ANO
	EXCEPT
		SELECT ANO FROM #T WHERE TOTAL != 0 GROUP BY ANO 